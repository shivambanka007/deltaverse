# DeltaVerse Full Stack Deployment - Cloud Build Configuration
# This configuration deploys the complete DeltaVerse stack to GCP
# Components: Fi-MCP Server (Go) -> Cloud Run, Backend API (Python) -> Cloud Run, Frontend (React) -> Firebase Hosting

steps:
  # Step 1: Deploy Fi-MCP Mock Server to Cloud Run
  - name: 'golang:1.24.2'
    id: 'deploy-fi-mcp'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🚀 Deploying Fi-MCP Mock Server..."
        echo "Verifying environment variables..."
        test -n "$PROJECT_ID" || (echo "❌ PROJECT_ID not set" && exit 1)
        test -n "$_CLOUD_RUN_REGION" || (echo "❌ _CLOUD_RUN_REGION not set" && exit 1)
        echo "✅ Environment variables verified"
        
        # Install gcloud SDK
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
        apt-get update && apt-get install -y google-cloud-sdk
        
        # Build Fi-MCP server
        cd fi-mcp-dev-master
        go mod tidy
        go build -o fi-mcp-server
        
        # Deploy to Cloud Run
        gcloud run deploy fi-mcp-dev \
          --source . \
          --platform managed \
          --region $_CLOUD_RUN_REGION \
          --allow-unauthenticated \
          --port 8080 \
          --set-env-vars="FI_MCP_PORT=8080" \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 1 \
          --project $PROJECT_ID
        
        # Get the deployed URL and save it
        FI_MCP_URL=$$(gcloud run services describe fi-mcp-dev --region=$_CLOUD_RUN_REGION --format='value(status.url)' --project $PROJECT_ID)
        echo "FI_MCP_URL=$${FI_MCP_URL}" > /workspace/fi-mcp-url.env
        echo "✅ Fi-MCP deployed successfully at $${FI_MCP_URL}"

  # Step 2: Build Backend Docker Image and Push to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend'
    args:
      - 'build'
      - '--build-arg'
      - 'BUILDKIT_INLINE_CACHE=1'
      - '--cache-from'
      - '${_GAR_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_CLOUD_RUN_SERVICE_NAME}/${_CLOUD_RUN_SERVICE_NAME}:latest'
      - '-t'
      - '${_GAR_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_CLOUD_RUN_SERVICE_NAME}/${_CLOUD_RUN_SERVICE_NAME}:$COMMIT_SHA'
      - '-t'
      - '${_GAR_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_CLOUD_RUN_SERVICE_NAME}/${_CLOUD_RUN_SERVICE_NAME}:latest'
      - '-f'
      - 'deltaverse-api/Dockerfile'
      - 'deltaverse-api'
    waitFor: ['-']

  # Step 3: Push Backend Image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend'
    args:
      - 'push'
      - '--all-tags'
      - '${_GAR_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_CLOUD_RUN_SERVICE_NAME}/${_CLOUD_RUN_SERVICE_NAME}'
    waitFor: ['build-backend']

  # Step 4: Deploy Backend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🚀 Deploying Backend API to Cloud Run..."
        
        # Load Fi-MCP URL
        source /workspace/fi-mcp-url.env
        echo "Using Fi-MCP URL: $${FI_MCP_URL}"
        test -n "$${FI_MCP_URL}" || (echo "❌ Fi-MCP URL not found" && exit 1)
        
        # Deploy backend service
        gcloud run deploy $_CLOUD_RUN_SERVICE_NAME \
          --image ${_GAR_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_CLOUD_RUN_SERVICE_NAME}/${_CLOUD_RUN_SERVICE_NAME}:$COMMIT_SHA \
          --project=$PROJECT_ID \
          --platform managed \
          --region $_CLOUD_RUN_REGION \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 2 \
          --timeout 300 \
          --port 8080 \
          --max-instances 1 \
          --set-env-vars="GCP_PROJECT_ID=$PROJECT_ID,FIREBASE_PROJECT_ID=$PROJECT_ID,ENVIRONMENT=production,DEVELOPMENT_MODE=false,FI_MCP_URL=$${FI_MCP_URL}"
        
        # Get backend URL and save it
        BACKEND_URL=$$(gcloud run services describe $_CLOUD_RUN_SERVICE_NAME --region=$_CLOUD_RUN_REGION --format='value(status.url)' --project $PROJECT_ID)
        echo "BACKEND_URL=$${BACKEND_URL}" > /workspace/backend-url.env
        echo "FI_MCP_URL=$${FI_MCP_URL}" >> /workspace/backend-url.env
        echo "✅ Backend deployed successfully at $${BACKEND_URL}"
    waitFor: ['push-backend', 'deploy-fi-mcp']

  # Step 5: Build Frontend
  - name: 'node:18'
    id: 'build-frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🏗️ Building Frontend Application..."
        
        # Load backend and Fi-MCP URLs
        source /workspace/backend-url.env
        echo "Using Backend URL: $${BACKEND_URL}"
        echo "Using Fi-MCP URL: $${FI_MCP_URL}"
        test -n "$${BACKEND_URL}" || (echo "❌ Backend URL not found" && exit 1)
        test -n "$${FI_MCP_URL}" || (echo "❌ Fi-MCP URL not found" && exit 1)
        
        # Navigate to frontend directory
        cd deltaverse-ui
        
        # Install dependencies
        npm ci --prefer-offline --no-audit
        
        # Set environment variables for build
        export CI=false
        export REACT_APP_API_URL=$${BACKEND_URL}
        export REACT_APP_FI_MCP_URL=$${FI_MCP_URL}
        export REACT_APP_FIREBASE_API_KEY=${_FIREBASE_API_KEY}
        export REACT_APP_FIREBASE_AUTH_DOMAIN=$PROJECT_ID.firebaseapp.com
        export REACT_APP_FIREBASE_PROJECT_ID=$PROJECT_ID
        export REACT_APP_FIREBASE_STORAGE_BUCKET=$PROJECT_ID.firebasestorage.app
        export REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${_FIREBASE_MESSAGING_SENDER_ID}
        export REACT_APP_FIREBASE_APP_ID=${_FIREBASE_APP_ID}
        export REACT_APP_FIREBASE_MEASUREMENT_ID=${_FIREBASE_MEASUREMENT_ID}
        export REACT_APP_ENVIRONMENT=production
        
        # Build the application
        npm run build
        echo "✅ Frontend build completed successfully"
    waitFor: ['deploy-backend']

  # Step 6: Deploy Frontend to Firebase Hosting
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🚀 Deploying Frontend to Firebase Hosting..."
        
        # Install Firebase CLI
        npm install -g firebase-tools
        
        # Authenticate with Firebase using gcloud token
        gcloud auth print-access-token > /tmp/firebase-token.txt
        export FIREBASE_TOKEN=$$(cat /tmp/firebase-token.txt)
        
        # Set Firebase project
        firebase use $PROJECT_ID --token $$FIREBASE_TOKEN
        
        # Deploy to Firebase Hosting
        firebase deploy --only hosting --project $PROJECT_ID --token $$FIREBASE_TOKEN
        
        echo "✅ Frontend deployed successfully to Firebase Hosting"
    waitFor: ['build-frontend']

# Substitution variables - these can be set in Cloud Build trigger or passed as parameters
substitutions:
  _CLOUD_RUN_REGION: 'us-central1'
  _CLOUD_RUN_SERVICE_NAME: 'deltaverse-api'
  _GAR_LOCATION: 'us-central1'
  _FIREBASE_API_KEY: 'AIzaSyDF_Jf5DTCH7GE4j6vyScuvTkOb7GnOW1o'
  _FIREBASE_MESSAGING_SENDER_ID: '1029461078184'
  _FIREBASE_APP_ID: '1:1029461078184:web:8762ad6bc8fa3e6edfd29d'
  _FIREBASE_MEASUREMENT_ID: 'G-C3LCZ6L5FB'

# Build options
options:
  # Use high-performance machine type for faster builds
  machineType: 'E2_HIGHCPU_8'
  # Enable substitution validation
  substitution_option: 'ALLOW_LOOSE'
  # Set build timeout (default is 10 minutes, extending for comprehensive deployment)
  timeout: '1800s'
  # Enable logging
  logging: CLOUD_LOGGING_ONLY

# Build artifacts (optional - for storing build outputs)
artifacts:
  objects:
    location: 'gs://$PROJECT_ID-build-artifacts'
    paths:
      - '/workspace/fi-mcp-url.env'
      - '/workspace/backend-url.env'
      - 'deltaverse-ui/build/**/*'

# Service account permissions required:
# - Cloud Run Admin
# - Artifact Registry Writer
# - Firebase Admin
# - Storage Admin
# - Service Account User
