# DeltaVerse Full Stack Deployment Pipeline
image: google/cloud-sdk:latest

definitions:
  services:
    docker:
      memory: 3072
  caches:
    pip: ~/.cache/pip
    node: node_modules
    docker1: ~/.docker
    go-mod: ~/.cache/go-mod
    go-build: ~/.cache/go-build

pipelines:
  default:
    - step:
        name: Deploy Fi-MCP Mock Server
        image: golang:1.24.2
        caches:
          - go-mod
          - go-build
        script:
          - echo "Verifying environment variables..."
          - test -n "$GCP_PROJECT_ID" || (echo "❌ GCP_PROJECT_ID not set" && exit 1)
          - test -n "$CLOUD_RUN_REGION" || (echo "❌ CLOUD_RUN_REGION not set" && exit 1)
          - echo "✅ Environment variables verified"
          - mkdir -p artifacts
          - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          - apt-get update && apt-get install -y google-cloud-sdk
          - cd fi-mcp-dev-master
          - go mod tidy
          - go build -o fi-mcp-server
          - gcloud auth activate-service-account --key-file=<(echo $GCP_SA_KEY | base64 -d)
          - gcloud config set project $GCP_PROJECT_ID
          - |
            gcloud run deploy fi-mcp-dev \
              --source . \
              --platform managed \
              --region $CLOUD_RUN_REGION \
              --allow-unauthenticated \
              --port 8080 \
              --set-env-vars="FI_MCP_PORT=8080" \
              --memory 512Mi \
              --cpu 1 \
              --max-instances 1
          - FI_MCP_URL=$(gcloud run services describe fi-mcp-dev --region=$CLOUD_RUN_REGION --format='value(status.url)')
          - echo "FI_MCP_URL=${FI_MCP_URL}" > ../artifacts/urls.env
          - echo "Saved Fi-MCP URL ${FI_MCP_URL}"
          - test -s ../artifacts/urls.env || (echo "Failed to save URLs" && exit 1)
        artifacts:
          - artifacts/**

    - step:
        name: Build and Push Backend to GAR
        services:
          - docker
        caches:
          - docker1
        script:
          - echo $GCP_SA_KEY | base64 -d > /tmp/gcp-key.json
          - gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          - gcloud config set project $GCP_PROJECT_ID
          - gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev
          - export IMAGE_TAG=${BITBUCKET_COMMIT}
          - export IMAGE_NAME="${GAR_LOCATION}-docker.pkg.dev/${GCP_PROJECT_ID}/${CLOUD_RUN_SERVICE_NAME}/${CLOUD_RUN_SERVICE_NAME}:${IMAGE_TAG}"
          # Enable Docker BuildKit for faster builds
          - export DOCKER_BUILDKIT=1
          # Build with cache support and progress output
          - docker build --progress=plain --cache-from $IMAGE_NAME:latest --build-arg BUILDKIT_INLINE_CACHE=1 -t $IMAGE_NAME -f deltaverse-api/Dockerfile deltaverse-api
          - docker push $IMAGE_NAME

    - step:
        name: Deploy Backend to Cloud Run
        script:
          - test -f artifacts/urls.env || (echo "URLs file not found" && exit 1)
          - source artifacts/urls.env
          - echo "Using Fi-MCP URL ${FI_MCP_URL}"
          - test -n "${FI_MCP_URL}" || (echo "Fi-MCP URL not found" && exit 1)
          - echo $GCP_SA_KEY | base64 -d > /tmp/gcp-key.json
          - gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          - gcloud config set project $GCP_PROJECT_ID
          - export IMAGE_TAG=${BITBUCKET_COMMIT}
          - export IMAGE_NAME="${GAR_LOCATION}-docker.pkg.dev/${GCP_PROJECT_ID}/${CLOUD_RUN_SERVICE_NAME}/${CLOUD_RUN_SERVICE_NAME}:${IMAGE_TAG}"
          - |
            gcloud run deploy $CLOUD_RUN_SERVICE_NAME \
              --image $IMAGE_NAME \
              --project=$GCP_PROJECT_ID \
              --platform managed \
              --region $CLOUD_RUN_REGION \
              --allow-unauthenticated \
              --memory 2Gi \
              --cpu 2 \
              --timeout 300 \
              --port 8080 \
              --max-instances 1 \
              --set-env-vars="GCP_PROJECT_ID=$GCP_PROJECT_ID,FIREBASE_PROJECT_ID=$GCP_PROJECT_ID,ENVIRONMENT=production,DEVELOPMENT_MODE=false,FI_MCP_URL=$FI_MCP_URL"
          - BACKEND_URL=$(gcloud run services describe $CLOUD_RUN_SERVICE_NAME --region=$CLOUD_RUN_REGION --format='value(status.url)')
          - echo "FI_MCP_URL=${FI_MCP_URL}" > artifacts/urls.env
          - echo "BACKEND_URL=${BACKEND_URL}" >> artifacts/urls.env
          - echo "Saved Backend URL ${BACKEND_URL}"
          - test -s artifacts/urls.env || (echo "Failed to save URLs" && exit 1)
        artifacts:
          - artifacts/**

    - step:
        name: Build and Deploy Frontend to Firebase
        deployment: production
        image: google/cloud-sdk:latest
        caches:
          - node
        script:
          - test -f artifacts/urls.env || (echo "URLs file not found" && exit 1)
          - source artifacts/urls.env
          - echo "Using Backend URL ${BACKEND_URL}"
          - echo "Using Fi-MCP URL ${FI_MCP_URL}"
          - test -n "${BACKEND_URL}" || (echo "Backend URL not found" && exit 1)
          - test -n "${FI_MCP_URL}" || (echo "Fi-MCP URL not found" && exit 1)
          - curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          - apt-get install -y nodejs
          - cd deltaverse-ui
          - npm ci --prefer-offline --no-audit
          - export CI=false
          - export REACT_APP_API_URL=$BACKEND_URL
          - export REACT_APP_FI_MCP_URL=$FI_MCP_URL
          - export REACT_APP_FIREBASE_API_KEY=AIzaSyDF_Jf5DTCH7GE4j6vyScuvTkOb7GnOW1o
          - export REACT_APP_FIREBASE_AUTH_DOMAIN=$GCP_PROJECT_ID.firebaseapp.com
          - export REACT_APP_FIREBASE_PROJECT_ID=$GCP_PROJECT_ID
          - export REACT_APP_FIREBASE_STORAGE_BUCKET=$GCP_PROJECT_ID.firebasestorage.app
          - export REACT_APP_FIREBASE_MESSAGING_SENDER_ID=1029461078184
          - export REACT_APP_FIREBASE_APP_ID=1:1029461078184:web:8762ad6bc8fa3e6edfd29d
          - export REACT_APP_FIREBASE_MEASUREMENT_ID=G-C3LCZ6L5FB
          - export REACT_APP_ENVIRONMENT=production
          - npm run build
          - cd ..
          - echo $GCP_SA_KEY | base64 -d > /tmp/gcp-key.json
          - gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          - gcloud config set project $GCP_PROJECT_ID
          - npm install -g firebase-tools
          - gcloud auth print-access-token > /tmp/firebase-token.txt
          - export FIREBASE_TOKEN=$(cat /tmp/firebase-token.txt)
          - firebase use $GCP_PROJECT_ID --token $FIREBASE_TOKEN
          - firebase deploy --only hosting --project $GCP_PROJECT_ID --token $FIREBASE_TOKEN
